{"name":"Gcalendar-notification-server","tagline":"Google calendar embedded notification server","body":"# Google Calendar event notification server #\r\n\r\n<i>Last update on 09/08/2015</i>\r\n\r\nEmbedded google calendar event notification server through Google Calendar API (Oauth2.0)\r\n\r\nThis project is an alternative for \"end device\" to Google Calendar push notification (https://developers.google.com/google-apps/calendar/v3/push?hl=en) where you need to have a domain receiving your notifications which force your application to have a back end realizing the job for your client.\r\n\r\n2 parts are featured :\r\n* gcalendar-notification-lib which is library you would used to manage Google Calendar API and process events notifications\r\n* gcalendar-notification-webserver which is a server implementation and message process management which expose its API for a web client\r\n\r\nIf you have your own server implementation, you can integrate gcalendar-notification-lib separately without the server part\r\n\r\n<h3>What does it do ?</h3>\r\n\r\n* receive notifications of all events you have subscribed through gcalendar-notification-lib APIs that are pushed to a web client\r\n* subscribe/unsubscribe to a precise event\r\n* create an event (with date start, date end and summary)\r\n* delete an event\r\n* retrieve list of Google calendar events for a specific date time range and optionnal text filter\r\n* retrieve basic user profile information\r\n* request an access token that will be used to request Google API for the scope Profile and Calendar\r\n* revoke an access token (if you want to)\r\n* register through Oauth2.0\r\n\r\n[ ! ] Event creation is very basic for now (date start / date begin and summary) but is a good medium to test notifications\r\n\r\n<h3>Run the testing server app</h3>\r\n\r\n``git clone git@github.com:akinaru/gcalendar-notification-server.git``\r\n\r\n``cd gcalendar-notification-server/gcalendar-notification-webserver/release``\r\n\r\n``java -jar gcalendar-notification-client-webserver-1.0.jar webPath=<your_absolute_path>/gcalendar-notification-server/web clientId=<your_client_id> clientSecret=<your_client_secret>``\r\n\r\n_ replace <your_absolute_path> with your path prior to gcalendar-notification-webserver \r\n_ replace <your_client_id> and <your_client_secret> with the ones you got from google developper console\r\n\r\n* go to you browser : <a>http://localhost:4242/gcalendar</a>\r\n\r\n* now you can click on \"start registration\" button to request registration. You will see a verification url appear and a user code.\r\n\r\n<i>If you dont see these two features appear maybe you have a problem with your client id / client secret</i>\r\n\r\n* go to specified URL and authorize access from Google API.\r\n\r\n* once it is done, you can click on \"request token\" button, and shortly a token will appear\r\n\r\n![screenshot](https://raw.github.com/akinaru/gcalendar-notification-server/master/sh.png)\r\n\r\n* From this moment you will have access to \"user profile\", \"calendar events\", \"create event\" and \"delete event\" buttons\r\n\r\n* You can create a fake event of your own with \"create event\" button putting the date time range of your choice\r\n\r\n* You can subscribe to events to come (even events already existing) and you will see a notification coming to your window when event will be about to start (60 seconds befor event) or when the event has actually started\r\n\r\nIn your console you can see talk between client and server :\r\n![screenshot](https://raw.github.com/akinaru/gcalendar-notification-server/master/sh2.png)\r\n\r\n<h3>Oauth2.0 for device registration</h3>\r\n\r\n```\r\nString yourOwnClientId=\"812741506391-h38jh0j4fv0ce1krdkiq0hfvt6n5amrf.apps.googleusercontent.com\";\r\nString yourClientSecret=\"1912308409123890\";\r\n```\r\n\r\nNow you can  instantiate ``AuthenticationManager`` class :\r\n\r\n```\r\nCalendarNotifManager calendarNotifManager = new CalendarNotifManager(yourOwnClientId, yourClientSecret);\r\n```\r\n\r\nThen you can request authentication :\r\n\r\n```\r\ncalendarNotifManager.requestDeviceAuth(new IOauthDeviceResponseListener() {\r\n\r\n\t@Override\r\n\tpublic void onResponseReceived(OauthForDeviceResponse response) {\r\n\t\t\r\n\t\t/* callback called when response is received from server*/\r\n\r\n\t}\r\n});\r\n```\r\n\r\nDescription of ``OauthForDeviceResponse`` :\r\n* ``getVerificationUrl()`` : url from which user will log and therefore authorize your server to request token\r\n* ``getUserCode()`` : code that user will reproduce exactly in the latter verification url\r\n* ``getDeviceCode()`` : code identifying your server which is viewed as an end device requesting google api\r\n* ``getExpiringBefore()`` : life time of your usercode in seconds\r\n* ``getInterval()`` : time interval between a next attempt in seconds\r\n\r\nThe verification url is displayed to the user via a web client.\r\nThe user will reproduce the user code from the same web client and authorize the server to request token.\r\nFrom this point you will be able to request token.\r\n\r\nThe whole authentication process is described in https://developers.google.com/identity/protocols/OAuth2ForDevices\r\n\r\n<h3>Request for access token</h3>\r\n\r\n```\r\ncalendarNotifManager.requestToken(new IRequestTokenListener() {\r\n\r\n\t@Override\r\n\tpublic void onRequestTokenReceived(OauthToken token) {\r\n\t\t//access token is received\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void onRequestTokenError(String description) {\r\n\t\t//an error occured requesting access token\r\n\t}\r\n});\r\n```\r\n\r\nOnce you have received a token you can access Google calendar API and profile.\r\n\r\n<h3>Request user profile</h3>\r\n\r\n```\r\ncalendarNotifManager.getUserProfileManager().getUserProfile(new IUserProfileListener() {\r\n\r\n\t@Override\r\n\tpublic void onSuccess(UserProfile userProfile) {\r\n\r\n\t\t// user profile received succcessfully :\r\n\r\n\t\t//userProfile.getGender()\r\n\t\t//userProfile.getDisplayName()\r\n\t\t//userProfile.getFamilyName()\r\n\t\t//userProfile.getGivenName()\r\n\t\t//userProfile.getLanguage()\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void onError(String description) {\r\n\t\t//an error occured requesting user profile\r\n\t}\r\n});\r\n```\r\n\r\n<h3>Request calendar events</h3>\r\n\r\nYou can request event with date time range from ``dateBegin`` to ``dateEnd`` with these two values in String timestamp format according RFC 3339 (ex: 2015-08-06T23:30:20+02:00)\r\nYou can optionnaly add a text filter\r\n\r\n```\r\ncalendarNotifManager.getCalendarManager().getEventList(dateBegin, dateEnd, searchText, new IEventListListener() {\r\n\r\n\t@Override\r\n\tpublic void onEventListReceived(List<CalendarEvents> calendarEventList) {\r\n\t\t//list of calendar events retrieved\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void onError(String description) {\r\n\t\t//an error occured requesting calendar events\r\n\t}\r\n});\r\n```\r\n\r\nHere is description of one event in List<CalendarEvents> retrieved :\r\n* ``String getEventId()`` : event identifier\r\n* ``String getStatus()``: event status\r\n* ``String getDateCreated()`` : creation date of the event\r\n* ``String getDateUpdated()`` : date of event udpate\r\n* ``String getSummary()`` : event summary\r\n* ``String getCreatorEmail()`` : event creator email\r\n* ``String getCreatorDisplayName()`` : event creator display name\r\n* ``boolean isCreatorSelf()`` : true if the event was created by calendar's owner\r\n* ``String getOrganizerEmail()`` : event organizer email\r\n* ``String getOrganizerDisplayName()`` : event organizer display name\r\n* ``boolean isOrganizerSelf()`` : true if event organizer is calendar's owner\r\n* ``String getDateStart()`` : event date start \r\n* ``String getDateEnd()`` : event date end \r\n* ``String getDateTimeStart()`` : event date and time start\r\n* ``String getDateTimeEnd()`` : event date and time end\r\n* ``boolean isSubscribed()`` : define if this event is subscribed or not (you will receive notification if true)\r\n\r\n<h3>Create event</h3>\r\n\r\nYou can create an event with begin and end date time of this event in String timestamp format according to RFC 3339 (ex: 2015-08-06T23:30:20+02:00) and precise a summary for this event.\r\n\r\n```\r\ncalendarNotifManager.getCalendarManager().createEvent(dateBegin, dateEnd, summary, new ICreateEventListener() {\r\n\r\n\t@Override\r\n\tpublic void onCreateSuccess(String id) {\r\n\t\t// event has been successfully created. The event id is returned on creation success\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void onError(String description) {\r\n\t\t//an error occured during event creation\r\n\t}\r\n\r\n});\r\n```\r\n\r\n<h3>Delete event</h3>\r\n\r\nYou can delete an evetn by ``eventId`` \r\n\r\n```\r\ncalendarNotifManager.getCalendarManager().deleteEvent(eventId, new IDeleteEventListener() {\r\n\r\n\t@Override\r\n\tpublic void onSuccess() {\r\n\t\t//event has been deleted\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void onError(String description) {\r\n\t\t//an error occured during deletion process\r\n\t}\r\n});\r\n```\r\n\r\n<h3>Event notification : subscription</h3>\r\n\r\nYou can be notified for a specified event referenced by its ``eventId``. You will be notified when the event start and you can parameter the time in seconds before it actually starts when you want to be notified.\r\n\r\nIf you want to be notified one minute before the event start replace ``timeAboutToStart`` by 60\r\n\r\n```\r\ncalendarNotifManager.getNotificationManager().subscribeEvent(eventId, timeAboutToStart, new IEventListener() {\r\n\r\n\t@Override\r\n\tpublic void onEventStart(String eventId, String summary) {\r\n\t\t//called when the event start\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void onEventAboutToStart(String eventId, String summary) {\r\n\t\t//called when the event is about to start (if you put a value >0 for timeAboutToStart parameter)\r\n\t}\r\n});\r\n```\r\n\r\n<h3>Unsubscribtion</h3>\r\n\r\n```\r\ncalendarNotifManager.getNotificationManager().unsubscribeEvent(eventId);\r\n```\r\n\r\n<h3>Get an Oauth2.0 token from Google developper console</h3>\r\n\r\nFor your application to be abled to request token for Oauth2.0 google API, you have to get one Oauth2.0 token from https://console.developers.google.com\r\n\r\n* First create a project\r\n* in \"credentials\" tab \"create a new client ID\" choose \"installed application\",quote \"other\" and \"create client ID\"\r\n* in \"consent screen\" tab choose tour email address and a product name (it should apparently match your project id name but I may be wrong here)\r\n\r\nNow in \"crendentials\" tab you should have an Oauth2.0 token client ID that looks like :<br/>\r\n``812741506391-h38jh0j4fv0ce1krdkiq0hfvt6n5amrf.apps.googleusercontent.com``\r\n\r\n* In \"API\" tab select \"Google + API\" and enable it\r\n* In \"API\" tab select \"Calendar API\" and enable it\r\n\r\n<b>External JAVA Library</b>\r\n\r\n* json-simple  : http://code.google.com/p/json-simple/\r\n\r\n* clientsocket : https://github.com/akinaru/socket-multiplatform/tree/master/client/socket-client/java\r\n\r\n* http-endec   : https://github.com/akinaru/http-endec-java\r\n\r\n* serversocket : https://github.com/akinaru/socket-multiplatform/tree/master/server/server-socket/blocking/java\r\n\r\n* websocket-java : https://github.com/akinaru/websocket-java\r\n\r\n<b>External UI features</b>\r\n\r\n* datetimepicker : https://github.com/xdan/datetimepicker by Chupurnov Valeriy\r\n\r\n* notification message using css3 : https://dhirajkumarsingh.wordpress.com/2012/05/06/cool-notification-messages-with-css3-jquery/\r\n\r\n<b>TODO</b>\r\n\r\n* stock raw configuration of events subscribed\r\n* improve \"create event\" input arguments (attendees / place ...)\r\n* configurable polling of \"getEventList\" API in case of concurrent modifications\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}